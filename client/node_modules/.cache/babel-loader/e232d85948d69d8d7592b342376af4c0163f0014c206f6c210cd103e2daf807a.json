{"ast":null,"code":"import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\";\nconst cookieAdapter = createEntityAdapter({});\nconst initialState = cookieAdapter.getInitialState();\nexport const cookieApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getCookies: builder.query({\n      query: () => '/cookies',\n      validateStatus: (response, result) => {\n        return response.status === 200 && !result.isError;\n      },\n      keepUnusedDataFor: 5,\n      transformResponse: responseData => {\n        const loadedCookies = responseData.map(cookie => {\n          cookie.id = cookie._id;\n          return cookie;\n        });\n        return cookieAdapter.setAll(initialState, loadedCookies);\n      },\n      providesTags: (result, error, arg) => {\n        if (result !== null && result !== void 0 && result.ids) {\n          return [{\n            type: 'Cookie',\n            id: 'LIST'\n          }, ...result.ids.map(id => ({\n            type: 'Cookie',\n            id\n          }))];\n        } else return [{\n          type: 'Cookie',\n          id: 'LIST'\n        }];\n      }\n    })\n  })\n});\nexport const {\n  useGetCookiesQuery\n} = cookieApiSlice;\n\n// returns the query result object\nexport const selectCookiesResult = cookieApiSlice.endpoints.getCookies.select();\n\n// creates memoized selector\nconst selectCookiesData = createSelector(selectCookiesResult, cookieResult => cookieResult.data // normalized state object with ids & entities\n);\n\n//getSelectors creates these selectors and we rename them with aliases using destructuring\nexport const {\n  selectAll: selectAllCookies,\n  selectById: selectCookieById,\n  selectIds: selectCookieId\n  // Pass in a selector that returns the cookies slice of state\n} = cookieAdapter.getSelectors(state => {\n  var _selectCookiesData;\n  return (_selectCookiesData = selectCookiesData(state)) !== null && _selectCookiesData !== void 0 ? _selectCookiesData : initialState;\n});","map":{"version":3,"names":["createSelector","createEntityAdapter","apiSlice","cookieAdapter","initialState","getInitialState","cookieApiSlice","injectEndpoints","endpoints","builder","getCookies","query","validateStatus","response","result","status","isError","keepUnusedDataFor","transformResponse","responseData","loadedCookies","map","cookie","id","_id","setAll","providesTags","error","arg","ids","type","useGetCookiesQuery","selectCookiesResult","select","selectCookiesData","cookieResult","data","selectAll","selectAllCookies","selectById","selectCookieById","selectIds","selectCookieId","getSelectors","state","_selectCookiesData"],"sources":["/Users/jinkim/Documents/Cookie Website/client/src/components/Cookies/cookiesApiSlice.js"],"sourcesContent":["import {\n    createSelector,\n    createEntityAdapter\n} from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\"\n\nconst cookieAdapter = createEntityAdapter({})\n\nconst initialState = cookieAdapter.getInitialState()\n\nexport const cookieApiSlice = apiSlice.injectEndpoints({\n    endpoints: builder => ({\n        getCookies: builder.query({\n            query: () => '/cookies',\n            validateStatus: (response, result) => {\n                return response.status === 200 && !result.isError\n            },\n            keepUnusedDataFor: 5,\n            transformResponse: responseData => {\n                const loadedCookies = responseData.map(cookie => {\n                    cookie.id = cookie._id\n                    return cookie\n                });\n                return cookieAdapter.setAll(initialState, loadedCookies)\n            },\n            providesTags: (result, error, arg) => {\n                if (result?.ids) {\n                    return [\n                        { type: 'Cookie', id: 'LIST' },\n                        ...result.ids.map(id => ({ type: 'Cookie', id }))\n                    ]\n                } else return [{ type: 'Cookie', id: 'LIST' }]\n            }\n        }),\n    }),\n})\n\nexport const {\n    useGetCookiesQuery,\n} = cookieApiSlice\n\n// returns the query result object\nexport const selectCookiesResult = cookieApiSlice.endpoints.getCookies.select()\n\n// creates memoized selector\nconst selectCookiesData = createSelector(\n    selectCookiesResult,\n    cookieResult => cookieResult.data // normalized state object with ids & entities\n)\n\n//getSelectors creates these selectors and we rename them with aliases using destructuring\nexport const {\n    selectAll: selectAllCookies,\n    selectById: selectCookieById,\n    selectIds: selectCookieId\n    // Pass in a selector that returns the cookies slice of state\n} = cookieAdapter.getSelectors(state => selectCookiesData(state) ?? initialState)"],"mappings":"AAAA,SACIA,cAAc,EACdC,mBAAmB,QAChB,kBAAkB;AACzB,SAASC,QAAQ,QAAQ,wBAAwB;AAEjD,MAAMC,aAAa,GAAGF,mBAAmB,CAAC,CAAC,CAAC,CAAC;AAE7C,MAAMG,YAAY,GAAGD,aAAa,CAACE,eAAe,CAAC,CAAC;AAEpD,OAAO,MAAMC,cAAc,GAAGJ,QAAQ,CAACK,eAAe,CAAC;EACnDC,SAAS,EAAEC,OAAO,KAAK;IACnBC,UAAU,EAAED,OAAO,CAACE,KAAK,CAAC;MACtBA,KAAK,EAAEA,CAAA,KAAM,UAAU;MACvBC,cAAc,EAAEA,CAACC,QAAQ,EAAEC,MAAM,KAAK;QAClC,OAAOD,QAAQ,CAACE,MAAM,KAAK,GAAG,IAAI,CAACD,MAAM,CAACE,OAAO;MACrD,CAAC;MACDC,iBAAiB,EAAE,CAAC;MACpBC,iBAAiB,EAAEC,YAAY,IAAI;QAC/B,MAAMC,aAAa,GAAGD,YAAY,CAACE,GAAG,CAACC,MAAM,IAAI;UAC7CA,MAAM,CAACC,EAAE,GAAGD,MAAM,CAACE,GAAG;UACtB,OAAOF,MAAM;QACjB,CAAC,CAAC;QACF,OAAOnB,aAAa,CAACsB,MAAM,CAACrB,YAAY,EAAEgB,aAAa,CAAC;MAC5D,CAAC;MACDM,YAAY,EAAEA,CAACZ,MAAM,EAAEa,KAAK,EAAEC,GAAG,KAAK;QAClC,IAAId,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEe,GAAG,EAAE;UACb,OAAO,CACH;YAAEC,IAAI,EAAE,QAAQ;YAAEP,EAAE,EAAE;UAAO,CAAC,EAC9B,GAAGT,MAAM,CAACe,GAAG,CAACR,GAAG,CAACE,EAAE,KAAK;YAAEO,IAAI,EAAE,QAAQ;YAAEP;UAAG,CAAC,CAAC,CAAC,CACpD;QACL,CAAC,MAAM,OAAO,CAAC;UAAEO,IAAI,EAAE,QAAQ;UAAEP,EAAE,EAAE;QAAO,CAAC,CAAC;MAClD;IACJ,CAAC;EACL,CAAC;AACL,CAAC,CAAC;AAEF,OAAO,MAAM;EACTQ;AACJ,CAAC,GAAGzB,cAAc;;AAElB;AACA,OAAO,MAAM0B,mBAAmB,GAAG1B,cAAc,CAACE,SAAS,CAACE,UAAU,CAACuB,MAAM,CAAC,CAAC;;AAE/E;AACA,MAAMC,iBAAiB,GAAGlC,cAAc,CACpCgC,mBAAmB,EACnBG,YAAY,IAAIA,YAAY,CAACC,IAAI,CAAC;AACtC,CAAC;;AAED;AACA,OAAO,MAAM;EACTC,SAAS,EAAEC,gBAAgB;EAC3BC,UAAU,EAAEC,gBAAgB;EAC5BC,SAAS,EAAEC;EACX;AACJ,CAAC,GAAGvC,aAAa,CAACwC,YAAY,CAACC,KAAK;EAAA,IAAAC,kBAAA;EAAA,QAAAA,kBAAA,GAAIX,iBAAiB,CAACU,KAAK,CAAC,cAAAC,kBAAA,cAAAA,kBAAA,GAAIzC,YAAY;AAAA,EAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}